/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Return operational metadata used by availability probes.
         */
        get: operations["health_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sites/{slug}/palette/swap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate and apply a new palette
         * @description Generate a new palette and apply it to the requested site.
         */
        post: operations["swap_site_palette_sites__slug__palette_swap_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overlay/events/edit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ingest Overlay Edit
         * @description Accept an overlay edit payload and apply it to the target source file.
         */
        post: operations["ingest_overlay_edit_overlay_events_edit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_slug}/sections/insert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Insert Section
         * @description Clone a Horizon section into the specified project workspace.
         */
        post: operations["insert_section_projects__project_slug__sections_insert_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_slug}/sections/insert/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream Insert Section
         * @description Stream generation progress events while inserting a Horizon section.
         */
        get: operations["stream_insert_section_projects__project_slug__sections_insert_stream_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthCheckResponse
         * @description Standard payload returned by the health check endpoint.
         */
        HealthCheckResponse: {
            /**
             * Status
             * @enum {string}
             */
            status: "ok" | "degraded" | "error";
            service: components["schemas"]["ServiceMetadata"];
            /**
             * Environment
             * @default dev
             * @enum {string}
             */
            environment: "dev" | "staging" | "prod";
            /**
             * Message
             * @default Service is healthy
             */
            message: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /**
             * Uptime Seconds
             * @description Number of seconds the service has been running
             * @default 0
             */
            uptime_seconds: number;
        };
        /**
         * HorizonPalette
         * @description Palette schema for the Horizon template color keys.
         */
        HorizonPalette: {
            /** Bg Base */
            bg_base: string;
            /** Bg Surface */
            bg_surface: string;
            /** Bg Contrast */
            bg_contrast: string;
            /** Text Primary */
            text_primary: string;
            /** Text Secondary */
            text_secondary: string;
            /** Text Inverse */
            text_inverse: string;
            /** Brand Primary */
            brand_primary: string;
            /** Brand Secondary */
            brand_secondary: string;
            /** Accent */
            accent: string;
            /** Border */
            border: string;
            /** Ring */
            ring: string;
            /** Critical */
            critical: string;
            /** Critical Contrast */
            critical_contrast: string;
        };
        /**
         * HorizonPaletteSwapRequest
         * @description Optional metadata supplied when requesting a Horizon palette refresh.
         */
        HorizonPaletteSwapRequest: {
            /**
             * Notes
             * @description Optional freeform guidance for palette generation.
             */
            notes?: string | null;
        };
        /**
         * HorizonPaletteSwapResponse
         * @description Payload returned after the backend applies a new Horizon palette.
         */
        HorizonPaletteSwapResponse: {
            palette: components["schemas"]["HorizonPalette"];
            /**
             * Applied At
             * Format: date-time
             * @description UTC timestamp when the palette was applied.
             */
            applied_at?: string;
        };
        /**
         * HorizonSectionInsertRequest
         * @description Request payload for inserting a Horizon section.
         */
        HorizonSectionInsertRequest: {
            /**
             * Section Key
             * @description Catalog key for the section to insert
             */
            section_key: string;
            /**
             * Position
             * @description Relative placement for the new section
             * @enum {string}
             */
            position: "before" | "after" | "start" | "end";
            /**
             * Target Section Id
             * @description Section ID the insertion is relative to (required for before/after)
             */
            target_section_id?: string | null;
            /**
             * Custom Section Prompt
             * @description Natural language brief used when inserting a custom section.
             */
            custom_section_prompt?: string | null;
        };
        /**
         * HorizonSectionInsertResponse
         * @description Response payload after inserting a Horizon section.
         */
        HorizonSectionInsertResponse: {
            /**
             * Component Relative Path
             * @description Path to the cloned component relative to the site root
             */
            component_relative_path: string;
            /**
             * Import Identifier
             * @description Identifier used in the HomePage.jsx import
             */
            import_identifier: string;
            /**
             * Section Id
             * @description Generated sectionId assigned to the new component
             */
            section_id: string;
            /**
             * Slot
             * @description Slot marker where the component was inserted
             */
            slot: string;
        };
        /**
         * OverlayEditEvent
         * @description Full payload accepted by the overlay ingest endpoint.
         */
        OverlayEditEvent: {
            /**
             * Projectslug
             * @description Slug of the Studio project emitting the edit
             */
            projectSlug: string;
            payload: components["schemas"]["OverlayEditPayload"];
            meta: components["schemas"]["OverlayEditMeta"];
        };
        /**
         * OverlayEditMeta
         * @description Additional metadata describing how the edit was committed.
         */
        OverlayEditMeta: {
            /**
             * Reason
             * @description Trigger that finalized the edit inside the overlay
             * @enum {string}
             */
            reason: "enter" | "blur";
        };
        /**
         * OverlayEditPayload
         * @description Text edit emitted from the in-page overlay.
         */
        OverlayEditPayload: {
            /**
             * Ppid
             * @description Stable identifier for the edited node
             */
            ppid: string;
            /**
             * Text
             * @description Sanitized text content captured from the overlay
             */
            text: string;
        };
        /**
         * OverlayEditResponse
         * @description Summary of an applied overlay edit.
         */
        OverlayEditResponse: {
            /**
             * Status
             * @description Indicates the edit was applied to the source file
             * @default applied
             * @constant
             */
            status: "applied";
            /** Projectslug */
            projectSlug: string;
            /**
             * Relativepath
             * @description Path to the updated file relative to the repository root
             */
            relativePath: string;
            /**
             * Previoustext
             * @description Text that was replaced
             */
            previousText: string;
            /**
             * Updatedtext
             * @description New text that was written
             */
            updatedText: string;
        };
        /**
         * ServiceMetadata
         * @description Metadata describing the running backend service.
         */
        ServiceMetadata: {
            /** Name */
            name: string;
            /** Version */
            version: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    health_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheckResponse"];
                };
            };
        };
    };
    swap_site_palette_sites__slug__palette_swap_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HorizonPaletteSwapRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HorizonPaletteSwapResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ingest_overlay_edit_overlay_events_edit_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OverlayEditEvent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverlayEditResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    insert_section_projects__project_slug__sections_insert_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HorizonSectionInsertRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HorizonSectionInsertResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_insert_section_projects__project_slug__sections_insert_stream_get: {
        parameters: {
            query: {
                position: "start" | "end" | "before" | "after";
                section_key: string;
                target_section_id?: string | null;
                custom_section_prompt?: string | null;
            };
            header?: never;
            path: {
                project_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
