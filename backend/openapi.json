{
  "openapi": "3.1.0",
  "info": {
    "title": "Prempage Backend",
    "summary": "Backend service supporting the Prempage Studio",
    "version": "0.1.0"
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health check",
        "description": "Return operational metadata used by availability probes.",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{slug}/palette/swap": {
      "post": {
        "tags": [
          "palette"
        ],
        "summary": "Generate and apply a new palette",
        "description": "Generate a new palette and apply it to the requested site.",
        "operationId": "swap_site_palette_sites__slug__palette_swap_post",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HorizonPaletteSwapRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HorizonPaletteSwapResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/overlay/events/edit": {
      "post": {
        "tags": [
          "overlay"
        ],
        "summary": "Ingest Overlay Edit",
        "description": "Accept an overlay edit payload and apply it to the target source file.",
        "operationId": "ingest_overlay_edit_overlay_events_edit_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OverlayEditEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverlayEditResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_slug}/sections/insert": {
      "post": {
        "tags": [
          "sections"
        ],
        "summary": "Insert Section",
        "description": "Clone a Horizon section into the specified project workspace.",
        "operationId": "insert_section_projects__project_slug__sections_insert_post",
        "parameters": [
          {
            "name": "project_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Project Slug"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HorizonSectionInsertRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HorizonSectionInsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheckResponse": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "degraded",
              "error"
            ],
            "title": "Status"
          },
          "service": {
            "$ref": "#/components/schemas/ServiceMetadata"
          },
          "environment": {
            "type": "string",
            "enum": [
              "dev",
              "staging",
              "prod"
            ],
            "title": "Environment",
            "default": "dev"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Service is healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "uptime_seconds": {
            "type": "number",
            "minimum": 0.0,
            "title": "Uptime Seconds",
            "description": "Number of seconds the service has been running",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "status",
          "service"
        ],
        "title": "HealthCheckResponse",
        "description": "Standard payload returned by the health check endpoint."
      },
      "HorizonPalette": {
        "properties": {
          "bg_base": {
            "type": "string",
            "title": "Bg Base"
          },
          "bg_surface": {
            "type": "string",
            "title": "Bg Surface"
          },
          "bg_contrast": {
            "type": "string",
            "title": "Bg Contrast"
          },
          "text_primary": {
            "type": "string",
            "title": "Text Primary"
          },
          "text_secondary": {
            "type": "string",
            "title": "Text Secondary"
          },
          "text_inverse": {
            "type": "string",
            "title": "Text Inverse"
          },
          "brand_primary": {
            "type": "string",
            "title": "Brand Primary"
          },
          "brand_secondary": {
            "type": "string",
            "title": "Brand Secondary"
          },
          "accent": {
            "type": "string",
            "title": "Accent"
          },
          "border": {
            "type": "string",
            "title": "Border"
          },
          "ring": {
            "type": "string",
            "title": "Ring"
          },
          "critical": {
            "type": "string",
            "title": "Critical"
          },
          "critical_contrast": {
            "type": "string",
            "title": "Critical Contrast"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "bg_base",
          "bg_surface",
          "bg_contrast",
          "text_primary",
          "text_secondary",
          "text_inverse",
          "brand_primary",
          "brand_secondary",
          "accent",
          "border",
          "ring",
          "critical",
          "critical_contrast"
        ],
        "title": "HorizonPalette",
        "description": "Palette schema for the Horizon template color keys."
      },
      "HorizonPaletteSwapRequest": {
        "properties": {
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Optional freeform guidance for palette generation."
          }
        },
        "type": "object",
        "title": "HorizonPaletteSwapRequest",
        "description": "Optional metadata supplied when requesting a Horizon palette refresh."
      },
      "HorizonPaletteSwapResponse": {
        "properties": {
          "palette": {
            "$ref": "#/components/schemas/HorizonPalette"
          },
          "applied_at": {
            "type": "string",
            "format": "date-time",
            "title": "Applied At",
            "description": "UTC timestamp when the palette was applied."
          }
        },
        "type": "object",
        "required": [
          "palette"
        ],
        "title": "HorizonPaletteSwapResponse",
        "description": "Payload returned after the backend applies a new Horizon palette."
      },
      "HorizonSectionInsertRequest": {
        "properties": {
          "section_key": {
            "type": "string",
            "title": "Section Key",
            "description": "Catalog key for the section to insert"
          },
          "position": {
            "type": "string",
            "enum": [
              "before",
              "after",
              "start",
              "end"
            ],
            "title": "Position",
            "description": "Relative placement for the new section"
          },
          "target_section_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Section Id",
            "description": "Section ID the insertion is relative to (required for before/after)"
          }
        },
        "type": "object",
        "required": [
          "section_key",
          "position"
        ],
        "title": "HorizonSectionInsertRequest",
        "description": "Request payload for inserting a Horizon section."
      },
      "HorizonSectionInsertResponse": {
        "properties": {
          "component_relative_path": {
            "type": "string",
            "title": "Component Relative Path",
            "description": "Path to the cloned component relative to the site root"
          },
          "import_identifier": {
            "type": "string",
            "title": "Import Identifier",
            "description": "Identifier used in the HomePage.jsx import"
          },
          "section_id": {
            "type": "string",
            "title": "Section Id",
            "description": "Generated sectionId assigned to the new component"
          },
          "slot": {
            "type": "string",
            "title": "Slot",
            "description": "Slot marker where the component was inserted"
          }
        },
        "type": "object",
        "required": [
          "component_relative_path",
          "import_identifier",
          "section_id",
          "slot"
        ],
        "title": "HorizonSectionInsertResponse",
        "description": "Response payload after inserting a Horizon section."
      },
      "OverlayEditEvent": {
        "properties": {
          "projectSlug": {
            "type": "string",
            "minLength": 1,
            "title": "Projectslug",
            "description": "Slug of the Studio project emitting the edit"
          },
          "payload": {
            "$ref": "#/components/schemas/OverlayEditPayload"
          },
          "meta": {
            "$ref": "#/components/schemas/OverlayEditMeta"
          }
        },
        "type": "object",
        "required": [
          "projectSlug",
          "payload",
          "meta"
        ],
        "title": "OverlayEditEvent",
        "description": "Full payload accepted by the overlay ingest endpoint."
      },
      "OverlayEditMeta": {
        "properties": {
          "reason": {
            "type": "string",
            "enum": [
              "enter",
              "blur"
            ],
            "title": "Reason",
            "description": "Trigger that finalized the edit inside the overlay"
          }
        },
        "type": "object",
        "required": [
          "reason"
        ],
        "title": "OverlayEditMeta",
        "description": "Additional metadata describing how the edit was committed."
      },
      "OverlayEditPayload": {
        "properties": {
          "ppid": {
            "type": "string",
            "minLength": 1,
            "title": "Ppid",
            "description": "Stable identifier for the edited node"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Sanitized text content captured from the overlay"
          }
        },
        "type": "object",
        "required": [
          "ppid",
          "text"
        ],
        "title": "OverlayEditPayload",
        "description": "Text edit emitted from the in-page overlay."
      },
      "OverlayEditResponse": {
        "properties": {
          "status": {
            "type": "string",
            "const": "applied",
            "title": "Status",
            "description": "Indicates the edit was applied to the source file",
            "default": "applied"
          },
          "projectSlug": {
            "type": "string",
            "title": "Projectslug"
          },
          "relativePath": {
            "type": "string",
            "title": "Relativepath",
            "description": "Path to the updated file relative to the repository root"
          },
          "previousText": {
            "type": "string",
            "title": "Previoustext",
            "description": "Text that was replaced"
          },
          "updatedText": {
            "type": "string",
            "title": "Updatedtext",
            "description": "New text that was written"
          }
        },
        "type": "object",
        "required": [
          "projectSlug",
          "relativePath",
          "previousText",
          "updatedText"
        ],
        "title": "OverlayEditResponse",
        "description": "Summary of an applied overlay edit."
      },
      "ServiceMetadata": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "version": {
            "type": "string",
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "version"
        ],
        "title": "ServiceMetadata",
        "description": "Metadata describing the running backend service."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}